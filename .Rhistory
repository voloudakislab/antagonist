df = MultiWAS::return_df("/lab/r.projects/PolyXcan_v2/output/2.METAXCAN/PolyXcan_DLPFC_v1_df.all.annotated.csv.gz")
renv::deactivate()
df = MultiWAS::return_df("/lab/r.projects/PolyXcan_v2/output/2.METAXCAN/PolyXcan_DLPFC_v1_df.all.annotated.csv.gz")
library(MultiWAS)
df = MultiWAS::return_df("/lab/r.projects/PolyXcan_v2/output/2.METAXCAN/PolyXcan_DLPFC_v1_df.all.annotated.csv.gz")
df
df = df[model_ID == "Brain: DLPFC (PEC) genes :: Homogenate :: Genes :: EpiXcan"]
df
usethis::use_data_raw("test.twas")
library(MulitWAS)
df         <- MultiWAS::return_df("/lab/r.projects/PolyXcan_v2/output/2.METAXCAN/PolyXcan_DLPFC_v1_df.all.annotated.csv.gz")
df         <- df[model_ID == "Brain: DLPFC (PEC) genes :: Homogenate :: Genes :: EpiXcan"]
library(MulitWAS)
df         <- MultiWAS::return_df("/lab/r.projects/PolyXcan_v2/output/2.METAXCAN/PolyXcan_DLPFC_v1_df.all.annotated.csv.gz")
test.twas  <- df[model_ID == "Brain: DLPFC (PEC) genes :: Homogenate :: Genes :: EpiXcan"]
usethis::use_data(test.twas, overwrite = TRUE)
to.process <- unique(df[, c("gwas","model_ID", ])
to.process <- unique(df[, c("gwas","model_ID") ])
to.process
library(MulitWAS)
test.twas  <- return_df("/lab/r.projects/PolyXcan_v2/output/2.METAXCAN/PolyXcan_DLPFC_v1_df.all.annotated.csv.gz")
library(MultiWAS)
test.twas  <- return_df("/lab/r.projects/PolyXcan_v2/output/2.METAXCAN/PolyXcan_DLPFC_v1_df.all.annotated.csv.gz")
test.twas  <- test.twas[model_ID == "Brain: DLPFC (PEC) genes :: Homogenate :: Genes :: EpiXcan"]
usethis::use_data(test.twas, overwrite = TRUE)
df <- test.twas
to.process <- unique(df[, c("gwas","model_ID") ])
results.dir   = "results/GTP_CDR/"
test.twas  <- return_df("/lab/r.projects/PolyXcan_v2/output/2.METAXCAN/PolyXcan_DLPFC_v1_df.all.annotated.csv.gz")
library(MultiWAS)
test.twas  <- return_df("/lab/r.projects/PolyXcan_v2/output/2.METAXCAN/PolyXcan_DLPFC_v1_df.all.annotated.csv.gz")
test.twas  <- test.twas[model_ID == "Brain: DLPFC (PEC) genes :: Homogenate :: Genes :: EpiXcan"]
df = test.twas
results.dir    = "results/GTP_CDR/"
signature.dir  = "/sc/arion/projects/va-biobank/resources/CMap/cmap_l1000_2021-11-20/eachDrug/"
gene.anno.file = "/sc/arion/projects/va-biobank/resources/CMap/cmap_l1000_2021-11-20/geneinfo_beta.txt"
noperm         = 100
thres.N.vector = c(50,100,250,500)
# Preparing TWAS
df <- MultiWAS::return_df(df)
df <- df[zscore!=-Inf & zscore!=Inf]
to.process <- unique(df[, c("gwas","model_ID") ])
to.process
cmap.list <- list.files(signature.dir, full.names = T)
i = 100
# i = 100
# Preparing the signature library
## the splitted drug-induced gene expressions from CMap database: need to be splitted due to large number of perturbations
## it is a matrix of expression t-statistics/z-statistics with entrez gene id as row names and drugs as column names (we assume a drug expression was compared with controls)
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id")])
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap
cmap
# i = 100
# Preparing the signature library
## the splitted drug-induced gene expressions from CMap database: need to be splitted due to large number of perturbations
## it is a matrix of expression t-statistics/z-statistics with entrez gene id as row names and drugs as column names (we assume a drug expression was compared with controls)
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id", "gene_symbol")])
geneAnn
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap
cmap
cmap[duplicated(ensembl_id)]
dim(cmap[duplicated(ensembl_id)])
dim(cmap[duplicated(ensembl_id)])[,1:10]
im(cmap[duplicated(ensembl_id)][,1:10]
# table(duplicated(df$gene_name)) ensembl are the best intersection of IDs between cmap and our TWAS approach.
}
cmap[duplicated(ensembl_id)][,1:10]
# i = 100
# Preparing the signature library
## the splitted drug-induced gene expressions from CMap database: need to be splitted due to large number of perturbations
## it is a matrix of expression t-statistics/z-statistics with entrez gene id as row names and drugs as column names (we assume a drug expression was compared with controls)
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id")])
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap[duplicated(ensembl_id)][,1:10]
# i = 100
# Preparing the signature library
## the splitted drug-induced gene expressions from CMap database: need to be splitted due to large number of perturbations
## it is a matrix of expression t-statistics/z-statistics with entrez gene id as row names and drugs as column names (we assume a drug expression was compared with controls)
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id", "gene_symbol")])
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap[duplicated(ensembl_id)][,1:10]
cmap <- cmap[!duplicated(ensembl_id)]
dim(cmap)
df
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id")])
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap <- cmap[!duplicated(ensembl_id)]
setnames(cmap, "ensembl_id", "feature")
cmap
# table(duplicated(df$gene_name)) ensembl are the best intersection of IDs between cmap and our TWAS approach.
as.data.table(dplyr::inner_join(df, cmap))
# table(duplicated(df$gene_name)) ensembl are the best intersection of IDs between cmap and our TWAS approach.
payload <- as.data.table(dplyr::inner_join(df, cmap))
payload
rm(list(cmap, df, gene, test.twas))
rm(list = c("cmap", "df", "gene"))
rm(list = c("cmap", "df", "geneAnn"))
to.process <- unique(payload[, c("gwas","model_ID") ])
# i = 100
# Preparing the signature library
## the splitted drug-induced gene expressions from CMap database: need to be splitted due to large number of perturbations
## it is a matrix of expression t-statistics/z-statistics with entrez gene id as row names and drugs as column names (we assume a drug expression was compared with controls)
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id")])
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap <- cmap[!duplicated(ensembl_id)]
setnames(cmap, "ensembl_id", "feature")
cmap
dim(cmap)
compounds <- names(cmap)[2:dim(cmap)[2]-1]
compounds
signatures <- names(cmap)[2:dim(cmap)[2]-1]
rm(list = c("cmap", "df", "geneAnn"))
ifelse(parallel::detectCores()-2<1,1,parallel::detectCores()-2)
tidyr::expand_grid(
unique(payload[, c("gwas","model_ID") ]),
compounds)
# i = 100
# Preparing the signature library
## the splitted drug-induced gene expressions from CMap database: need to be splitted due to large number of perturbations
## it is a matrix of expression t-statistics/z-statistics with entrez gene id as row names and drugs as column names (we assume a drug expression was compared with controls)
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id")])
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap <- cmap[!duplicated(ensembl_id)]
setnames(cmap, "ensembl_id", "feature")
names(cmap)
2:dim(cmap)[2]-1
dim(cmap)[2]-1
2:300
2:(dim(cmap)[2]-1)
names(cmap)[2:(dim(cmap)[2]-1)]
signatures <- names(cmap)[2:(dim(cmap)[2]-1)]
signatures
to.process <- tidyr::expand_grid(
unique(payload[, c("gwas","model_ID") ]),
compounds)
to.process
to.process <- tidyr::expand_grid(
unique(payload[, c("gwas","model_ID") ]),
compounds,
thres.N.vector)
to.process
to.process <- tidyr::expand_grid(
unique(payload[, c("gwas","model_ID") ]),
compounds,
c(NA,thres.N.vector))
to.process
seq(nrow(to.process))
payload[order(abs(zscore), decreasing = T)]
# Order by z-score
payload <- payload[order(abs(zscore), decreasing = T)]
to.process
tidyr::expand_grid(
unique(payload[, c("gwas","model_ID") ]),
compounds,
"thres.N.Vector" = c(NA,thres.N.vector))
i
to.process[100]
to.process <- as.data.table(tidyr::expand_grid(
unique(payload[, c("gwas","model_ID") ]),
compounds,
"thres.N.Vector" = c(NA,thres.N.vector)))
to.process[100]
cmap.list[i]
message(paste0("Now processing: ", basename(cmap.list[i])))
cmap.list
grep(cmap.list[i], cmap.list)
j = 1
to.process[1]
to.process[1]$gwas
to.process[1]$model_ID
# i = 100
# Preparing the signature library
## the splitted drug-induced gene expressions from CMap database: need to be splitted due to large number of perturbations
## it is a matrix of expression t-statistics/z-statistics with entrez gene id as row names and drugs as column names (we assume a drug expression was compared with controls)
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id")])
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap <- cmap[!duplicated(ensembl_id)]
setnames(cmap, "ensembl_id", "feature")
signatures <- names(cmap)[2:(dim(cmap)[2]-1)]
signatures
df <- test.twas
# Preparing TWAS
df <- MultiWAS::return_df(df)
df <- df[zscore!=-Inf & zscore!=Inf]
# Preparing Directories
MultiWAS::gv_dir.create(results.dir)
cmap.list <- list.files(signature.dir, full.names = T)
message(paste0("Now processing: ", basename(cmap.list[i])))
# i = 100
# Preparing the signature library
## the splitted drug-induced gene expressions from CMap database: need to be splitted due to large number of perturbations
## it is a matrix of expression t-statistics/z-statistics with entrez gene id as row names and drugs as column names (we assume a drug expression was compared with controls)
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id")])
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap <- cmap[!duplicated(ensembl_id)]
setnames(cmap, "ensembl_id", "feature")
signatures <- names(cmap)[2:(dim(cmap)[2]-1)]
# table(duplicated(df$gene_name)) ensembl are the best intersection of IDs between cmap and our TWAS approach.
payload <- as.data.table(dplyr::inner_join(df, cmap))
# Order by absolute z-score
payload <- payload[order(abs(zscore), decreasing = T)]
to.process <- as.data.table(tidyr::expand_grid(
unique(payload[, c("gwas","model_ID") ]),
compounds,
"thres.N.Vector" = c(NA,thres.N.vector)))
j =1
thisgwas      <- to.process[j]$gwas
thismodel     <- to.process[j]$model_ID
thissignature <- to.process[j]$compounds
thisthreshold <- to.process[j]$thres.N.Vector
j
payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID,
c("feature","zscore",thissignature)]
payload
str(payload)
class(payload)
to.process[j]$gwas
to.process[j]$model_ID
payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID]
to.process[j]$gwas &
model_ID == to.process[j]$model_ID][,
payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID][,
c("feature","zscore",thissignature)]
payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID][,
c("feature","zscore",thissignature), by = F]
payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID]
c("feature","zscore",thissignature)
payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID,
c("feature","zscore",thissignature), with = F]
eval(c("feature","zscore",thissignature))
to.process[j]$gwas &
model_ID == to.process[j]$model_ID,
payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID,
..c("feature","zscore",thissignature), with = F]
c("feature","zscore",to.process[j]$compounds)
colofinterest <- c("feature","zscore",to.process[j]$compounds)
payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID,
..colofinterest, with = F]
colofinterest <- c("feature","zscore",to.process[j]$compounds)
colofinterest
to.process[j]
# Preparing TWAS
df <- MultiWAS::return_df(df)
df <- df[zscore!=-Inf & zscore!=Inf]
# Preparing Directories
MultiWAS::gv_dir.create(results.dir)
cmap.list <- list.files(signature.dir, full.names = T)
cmap.list <- list.files(signature.dir, full.names = T)
message(paste0("Now processing: ", basename(cmap.list[i])))
# i = 100
# Preparing the signature library
## the splitted drug-induced gene expressions from CMap database: need to be splitted due to large number of perturbations
## it is a matrix of expression t-statistics/z-statistics with entrez gene id as row names and drugs as column names (we assume a drug expression was compared with controls)
cmap <- as.data.table(readRDS(cmap.list[i]), keep.rownames = "entrezgene")
cmap[, entrezgene := as.integer(entrezgene)]
# cmap=data.frame(cmap) # change the type back
# Load gene annotation
geneAnn <- fread(gene.anno.file)
geneAnn <- unique(geneAnn[, c("gene_id", "ensembl_id")])
geneAnn <- geneAnn[!is.na(ensembl_id) & ensembl_id != ""]
setnames(geneAnn, "gene_id", "entrezgene")
cmap <- data.table::as.data.table(dplyr::left_join(geneAnn, cmap))
cmap <- cmap[, entrezgene:=NULL]
cmap <- cmap[!duplicated(ensembl_id)]
setnames(cmap, "ensembl_id", "feature")
signatures <- names(cmap)[2:(dim(cmap)[2]-1)]
signatures
# table(duplicated(df$gene_name)) ensembl are the best intersection of IDs between cmap and our TWAS approach.
payload <- as.data.table(dplyr::inner_join(df, cmap))
# Order by absolute z-score
payload <- payload[order(abs(zscore), decreasing = T)]
to.process <- as.data.table(tidyr::expand_grid(
unique(payload[, c("gwas","model_ID") ]),
compounds,
"thres.N.Vector" = c(NA,thres.N.vector)))
colofinterest <- c("feature","zscore",to.process[j]$compounds)
payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID,
..colofinterest, with = F]
to.process
to.process <- as.data.table(tidyr::expand_grid(
unique(payload[, c("gwas","model_ID") ]),
signatures)) #, "thres.N.Vector" = c(NA,thres.N.vector)))
to.process
colofinterest <- c("feature","zscore",to.process[j]$compounds)
thispayload   <- payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID,
..colofinterest, with = F]
thispayload
to.process[j]$compounds
rm(compounds)
to.process
colofinterest <- c("feature","zscore",to.process[j]$signatures)
thispayload   <- payload[
gwas == to.process[j]$gwas &
model_ID == to.process[j]$model_ID,
..colofinterest, with = F]
thispayload
c(NA,thres.N.vector)
thispayload
thispayload[,3]
to.process
to.process[j]
thispayload
# Define the inputs (thisthreshold will affect this)
disease.zscore   <- thispayload$zscore
signature.zscore <- as.numeric(thispayload[,3])
# Define the inputs (thisthreshold will affect this)
disease.zscore   <- as.numeric(thispayload$zscore)
signature.zscore <- as.numeric(thispayload[,3])
# make the calculations
spearman.obj = cor.test(
signature.zscore, disease.zscore,
method="spearman", use="na.or.complete", exact = FALSE)
# Define the inputs (thisthreshold will affect this)
disease.zscore   <- as.numeric(thispayload$zscore)
signature.zscore <- as.numeric(thispayload[,3])
thispayload[,3]
as.numeric(thispayload[,3])
signature.zscore <- as.numeric(thispayload[[3]])
signature.zscore
# make the calculations
spearman.obj = cor.test(
signature.zscore, disease.zscore,
method="spearman", use="na.or.complete", exact = FALSE)
pearson.obj  = cor.test(
signature.zscore, disease.zscore,
method = "pearson",use="na.or.complete")
data.table(
cor.spearman = spearman.obj$estimate,
cor.pearson  = pearson.obj$estimate,
p.spearman   = spearman.obj$p.value,
p.pearson    = pearson.obj$p.value
)
thispayload
data.table(
paste0(cor.spearman, "_", thisthreshold) = spearman.obj$estimate,
data.table(
paste0("cor.spearman_", thisthreshold) = spearman.obj$estimate,
paste0("cor.spearman_", thisthreshold)
data.table(
eval(paste0("cor.spearman_", thisthreshold)) = spearman.obj$estimate,
data.table(
cor.spearman = spearman.obj$estimate,
cor.pearson  = pearson.obj$estimate,
p.spearman   = spearman.obj$p.value,
p.pearson    = pearson.obj$p.value
)
names(preoutput) <- paste0(names(preoutput), "_", thisthreshold)
# populate the table
preoutput <- data.table(
cor.spearman = spearman.obj$estimate,
cor.pearson  = pearson.obj$estimate,
p.spearman   = spearman.obj$p.value,
p.pearson    = pearson.obj$p.value)
names(preoutput) <- paste0(names(preoutput), "_", thisthreshold)
preoutput
# populate the table
preoutput <- data.table(
cor.spearman = spearman.obj$estimate,
cor.pearson  = pearson.obj$estimate,
p.spearman   = spearman.obj$p.value,
p.pearson    = pearson.obj$p.value)
names(preoutput) <- paste0(names(preoutput), "_", ifelse(is.na(thisthreshold), "ALL", thisthreshold))
preoutput
thisthreshold = thres.N.vector[1]
thisthreshold
thispayload[zscore>0][seq(thisthreshold)]
rbind(
thispayload[zscore>0][seq(thisthreshold)],
thispayload[zscore<0][seq(thisthreshold)]
)
disease.zscore <- rbind(
thispayload[zscore>0][seq(thisthreshold)],
thispayload[zscore<0][seq(thisthreshold)]
)
rbind(
thispayload[zscore>0][seq(thisthreshold)],
thispayload[zscore<0][seq(thisthreshold)] )
disease.zscore <- rbind(
thispayload[zscore>0][seq(thisthreshold)],
thispayload[zscore<0][seq(thisthreshold)] )
disease.genes  <- disease.zscore$feature
disease.zscore <- as.numeric(disease.zscore$zscore)
disease.zscore
disease.genes
as.numeric(thispayload[feature %in% disease.genes][[3]])
